// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/file_service.proto

package mocks3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	GetFile(ctx context.Context, in *FileSize, opts ...grpc.CallOption) (FileService_GetFileClient, error)
	PutFile(ctx context.Context, opts ...grpc.CallOption) (FileService_PutFileClient, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) GetFile(ctx context.Context, in *FileSize, opts ...grpc.CallOption) (FileService_GetFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[0], "/proto.FileService/GetFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceGetFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileService_GetFileClient interface {
	Recv() (*FileBlob, error)
	grpc.ClientStream
}

type fileServiceGetFileClient struct {
	grpc.ClientStream
}

func (x *fileServiceGetFileClient) Recv() (*FileBlob, error) {
	m := new(FileBlob)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) PutFile(ctx context.Context, opts ...grpc.CallOption) (FileService_PutFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[1], "/proto.FileService/PutFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServicePutFileClient{stream}
	return x, nil
}

type FileService_PutFileClient interface {
	Send(*FileBlob) error
	CloseAndRecv() (*FileSize, error)
	grpc.ClientStream
}

type fileServicePutFileClient struct {
	grpc.ClientStream
}

func (x *fileServicePutFileClient) Send(m *FileBlob) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServicePutFileClient) CloseAndRecv() (*FileSize, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileSize)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	GetFile(*FileSize, FileService_GetFileServer) error
	PutFile(FileService_PutFileServer) error
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) GetFile(*FileSize, FileService_GetFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFileServiceServer) PutFile(FileService_PutFileServer) error {
	return status.Errorf(codes.Unimplemented, "method PutFile not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileSize)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).GetFile(m, &fileServiceGetFileServer{stream})
}

type FileService_GetFileServer interface {
	Send(*FileBlob) error
	grpc.ServerStream
}

type fileServiceGetFileServer struct {
	grpc.ServerStream
}

func (x *fileServiceGetFileServer) Send(m *FileBlob) error {
	return x.ServerStream.SendMsg(m)
}

func _FileService_PutFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).PutFile(&fileServicePutFileServer{stream})
}

type FileService_PutFileServer interface {
	SendAndClose(*FileSize) error
	Recv() (*FileBlob, error)
	grpc.ServerStream
}

type fileServicePutFileServer struct {
	grpc.ServerStream
}

func (x *fileServicePutFileServer) SendAndClose(m *FileSize) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServicePutFileServer) Recv() (*FileBlob, error) {
	m := new(FileBlob)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFile",
			Handler:       _FileService_GetFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutFile",
			Handler:       _FileService_PutFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/file_service.proto",
}
